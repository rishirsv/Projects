# YouTube Transcript
Video ID: fD4ktSkNCw4
Title: A 3-step AI coding workflow for solo founders | Ryan Carson (5x founder)
Extracted: 2025-09-20T16:14:57.297Z
Length: 33428 characters

---

I think the biggest mistake that I do that everyone does is they try to rush through the context where you just don't have the patience to tell the AI what it actually needs to know to solve your problem. And I think if we all just slow down a tiny bit and do these two steps it speeds everything up. Nobody really knows how to do this stuff. The only way you're really going to figure it out is by getting in here and getting your hands dirty and see what works. That's a place where so many engineers and product managers get stuck in a loop like who's going to take this PR and actually break it down in the right steps. So even just this is such a timesaver for people building products building this new startup I literally feel like I'm able to do all of it. Am I able to do it as well as a dedicated product manager? No. Am I able to think as deeply as CTO? No. But I am able for sure to build this company. This is the way people I'm telling you. Pay [Music] attention. Welcome to How I AI. I'm Claire, product leader and AI obsessive here on a mission to help you build better with these new tools. 2025 is definitely the year of the vibe coder but you can't always vibe your way to a scalable execution strategy. In this episode, Ryan Carson, a five-time founder with 20 years experience, shows us how he brings PRDs, task lists, and some advanced prompting techniques to Cursor to make sure he's not just vibing, he's building the right things. Let's get to it. Today's episode is brought to you by ChatPD. I know that many of you are tuning in to How I AI to learn practical ways you can apply AI and make it easier to build. That's exactly why I built ChatPD. Chat PRD is an AI co-pilot that helps you write great product docs, automate tedious coordination work, and get strategic coaching from an expert AI CPO. And it's loved by everyone from the fastest growing AI startups to large enterprises with hundreds of PMs. Whether you're trying to vibe code a prototype, teach a firsttime PM the ropes, or scale efficiently in a large organization Chat PRD helps you do better work fast. And we're integrated with the tools you love. Vzero.dev, Dev, Google Drive Slack, Linear, Confluence, and more. So you don't have to change your workflow to accelerate with AI. Try ChatPRD free at chaturd.ai/howi ai. And let's make product fun again. Hey Ryan, it's nice to have you here. Thanks. It's exciting to be here. I listen to every episode so far and I'm honored to be here myself. I can't wait. So I'm going to start with an easy question, which is what are the last three things you built with AI? I don't know if you call constantly using chat GBT with your kids, building something in AI, but I feel like I feel like I'm the constant AI coach in our family and I'm always delighted actually with what our kids are doing. And because of that, um, my amazing 14-year-old kiddo Devon, he said, "Dad like you know, I've been thinking about this game." And I said, "Well, like let's build it." And so we're building a a primitive little sidescroller and he's like the creative director. So Oh, it's so fun. So that's sort of thing one and thing two. I would say thing three is the startup I'm building which is just this huge amount of work where I'm coding. But then there's just all sorts of little quick things I vibe code you know all the time. So all day every day all day every day chat should be te vibe coding. I'm going to make us all t-shirts and hate. Okay. So one of the things that I think you do really well compared to other vibe coders is you bring some structure to the process. you're you're quite wise about how you use cursor and so I'd love for you to pull up your screen and show us how you get cursor to follow a plan. Let's do it. So the reason why uh I do this is because I've been coding and coding coding with AI and you just learn as you do this that you really have to get good about context what you're showing the AI what you're asking AI to do and you end up cutting back uh all all the things you're doing to a manageable amount of things uh that the AI can actually do. So, the process I'm going to show you I'm in Cursor now. Uh, in case you're listening to the show, you can download it for free at cursor.com. Uh, it's basically a VS Code fork, right? So, if you ever use VS Code, it's a great tool. So, what I've done here is open up a a basic project that I vibe coded yesterday just to kind of show you what's going on. This is a a stupid little CRM tool for a yacht club because I thought that would be kind of funny. So, so there's that. So, all right. So say that you want to make a change in here and it's a bigger change than just a small uh you know a quick hey will you change this thing say it's larger all right so you would probably want to create a product requirement doc right like prd and and if you're watching the show and you don't know about cla's chat prds absolutely check it out because it's amazing but if you need a lighter lift then here's what I do so I've created three files over here in my cursor rules folder and I'll walk you through what they do and how they work. I've also open sourced these and so we can throw those uh a link in the show notes for you all to grab that. So the first one is a simple uh instruction for the AI to create a product requirement docs. Again, Claire knows everything about this and lives this and breathes this, but to a lot of people that don't know about PRDs, right, it's it's how you describe a feature that you're wanting to build. And so this rule explains to the AI how to write a PRD for the user. So the way you use this is is very simple, right? So I'm gonna go over and I want to pause really quickly because I love your initial prompt which says this is a PRD that's suitable for a junior developer to understand and implement this feature. That's such an interesting little call out. Yeah, that well spotted because again the as you code and code and code with AIs, you you start to realize that they're like a genius PhD student, right? But but they they can't seem to connect these really simple obvious things that you and I know. And so saying junior developer is kind of a way to instruct the AI, let's keep this at the at a certain level. Yep. You know, we've got some process we've got some clarifying questions. You'll see this in action. I'll actually run it. Great. So, let's do that. Great. So, I'm going to atlude this file which puts it in the context window and then I'm going to give it a simple instruction which I've pre-written which is I'd like to add a report that shows me all the boat names of members and how many emails they've been sent. This is a big deal if you're in a yacht in a yacht club. You have a lot more fun use cases to provide coding. I I try, you know. So, let's see what happens. And so I'm going to go and hit go. We're in agent mode. For those of you who are astute you'll notice I'm using Claude uh 37 Sonnet in Max mode. I actually tend to use uh Gemini 2.5 Pro. And it's funny, I didn't notice that had selected that but I'm now a default 03 girl. Ooh. Ooh. We'll have to talk. Yeah. And then when 03 gets stalled out, I go to 37. Right. Right. It's funny. I'm pretty much default uh Gemini 2.5 Pro. I love the max mode. It is sort of expensive. I probably spend maybe three 400 bucks a month. Uh uh but you know, worth it. Think that's okay. Okay. So, what we've got here is the AI came back and gave us some clarifying questions on the PRD. Uh I'm going to answer a couple of these just to to show you how this works. So if you're listening along, the AI has said, "Okay, great. I'll help you create a PRD." Uh have a couple questions for you. Uh the first one is, "What is the problem this reporter is is trying to solve?" Well, we are uh what problem is this? We're trying to give visibility into how many emails people are getting right? All right. So, that's thing one. Let's go. Let's answer the second one. Who specifically will be using the report? All right. We'll say admins. Where should this report be accessible? Uh you pick. And so there's a couple I I would say there's probably too many questions in here, but one of these things again that I want everyone watching to kind of get used to is you'll notice in this PRD rule file I've done something specific here where I've said I want these questions to be dot notation where it's 2.1 and 2.2 because you end up otherwise the AI would just give you a bunch of questions and it would it would put more than one question in a bullet point and it becomes hard to use. So, you kind of get used to this specificity, right? So, I'm just going to uh and say the rest. Make your best judgment. I do the exact same prompt. I say you pick whatever you think is best. Yeah, cuz I'm kind of lazy, right? So, all right. So, let's do that. So, it's going to fire up and start creating this PRD. Now, what I've chosen is is, you know, over here I've got a task folder. You put PRD in there. And then we're going to generate a list of tasks in a minute. So, it says "Okay, great." Uh, I'll now create it. And it's generating it. So, that will happen in a minute. I'm going to actually nip over uh to my browser because I do want to show you a couple other interesting things. Um, so, first of all, this is my amazing Yacht Club member of the app that we just coded. Now, we're going to pop this in the link, but this is uh the uh repo that has these prompts in it. We'll give those to you. But there's this really cool open source tool called Taskmaster. This is open source. It's completely free and it's like a hyped up version of what I'm showing you. So it's it runs in as a command line interface tool. It's great. It it's actually was too much for me. I I wanted less uh less power, less control or less power, more control. So this is a a great alternative to that. So I'm going to head back into cursor. Just to kind of recap where we are so far. So you have a cursor rules files that gives uh rules and instructions for generating a PRD. You generate the PRD in agent mode using whatever your preferred model is. That puts that PRD markdown file in a tasks folder that you've put in in your repo. And now we're going to look at that PRD and show how you work through it to build something. Exactly. Okay. You're a good student. So here is our PRD. It's pretty straightforward if you've ever looked at a PRD. Um, I'm going to show you. So you've got functional requirements, uh non- goals, design considerations, etc. Right? And let's back up like what are we doing here? What we're doing is making it clear, uh, to the large language model what we want done. I think the biggest mistake that I do that everyone does is they try to rush through the context where you just don't have the patience to tell the AI what it actually needs to know to solve your problem. And I think if we all just slow down a tiny bit and do these two steps it speeds everything up, right? So we've got a PRD. It's not rocket science here. Uh now, next, what we want to do is generate tasks for this. So, let's go and generate the task based on off this PRD. So I if you're listening I'm back in cursor and I'm uh I'm including the the file that generates the task. It's called generate tasks and I'm going to say uh please generate tasks task for and then I'm going to tag the PRD. Got it. So this is another rule probably similar to your generate PRD one that explains what a task is and how to do it well and then you're giving it the context of the PRD itself. Exactly. So let's have a quick look at the generate task list. So, the goal is to guide an AI assistant in creating a detailed step-by-step task list list. This is what it what I want the list to look like. This is the process. You'll see it's going to ask me a couple questions and it's going to pump out uh tasks in this format as a markdown file. I have to ask, how did you create these rules? These the it's a lovely prompt. It's well structured. It's clear. How did you get good at writing these instructions prompts? the same way you did. Basically, I tried a couple things. They didn't work. I got more specific and then of course, you know, I had a very intelligent LM write this for me and then I edit it. You know, you again, you sort of learn some of the tricks of the trade. Like, I want this task list to be in markdown and I want I want there to be check boxes so we can check them off. I mean, silly stuff like that. So, the biggest thing I want people to walk away from the show is, you know what, nobody really knows how to do this stuff. The only way you're really going to figure it out is by getting in here and getting your hands dirty and see what works. Um and then stick with a model that you consistently like. Like, I'm getting to know Gemini 2.5 Pro really well, like what it's good at, what it's not good at. So, let's see what it's good at. All right. So, I just said, "Please generate task for this PRD." I tagged the file. Uh we're using a reasoning model. So we're seeing uh the thinking tokens kind of whiz by and all this thinking might cost you a little bit more, but you get a little bit more visibility. You learn more and looks like it's doing a good job. Amen. Yeah. I I feel like for the extra 5 cents, like this is absolutely worth it. Um, so in in this instruction it it the instruction is give me some basic tasks and then ask me if they're okay and then tell me to go to proceed. So you'll see it says ready to generate the subtasks. Uh, respond with go to proceed. You know, as I'm looking at this side by side, what I really like about your generate tasks instructions is you've given it a very explicit process. It's you get this file, you do step one, you get this next step next file. And it's not quite an agent, but it really brings in this like agentic thinking of where are the decision points, where are the user interaction points um but in sort of more this linear um step-by-step chat mode. Exactly. And I have beenounding the cursor team non-stop like why don't you just build this into the core developer experience of the app? I don't understand why this isn't just the way you use cursor and they keep saying we're doing it. So, you know, and and for those listening, that delightful is when cursor cursor is done generating. Isn't that the best? I love that. I love it. This episode is brought to you by notion. Notion is now your do everything AI tool for work. With new AI meeting notes, enterprise search, and research mode, everyone on your team gets a notetaker, researcher, doc drafter, brainstormer. Your new AI team is here right where your team already works. I've been a longtime Notion user and have been using the new Notion AI features for the last few weeks. I can't imagine working without them. AI meeting notes are a gamecher. The summaries are accurate and extracting action items is super useful for standups, team meetings, one-on- ones, customer interviews, and yes, podcast prep. Notion's AI meeting notes are now an essential part of my team's workflow. The fastest growing companies like OpenAI, Ramp, Verscell, and Cursor all use Notion to get more done. Try all of Notion's new AI features for free by signing up with your work email at notion.com/howi aai. So, we're going to accept those changes. We're going to hop over here and let's just kind of see what it did, right? So, oh wow, I know. It's fun, isn't it? So, what you've got up here is the relevant files. Now, this is a trick I learned from a friend on X where my thinking here is that this should help the LLM just remember what files are we really focusing on. Even though I will specifically tag these in the context, uh I I think it's helpful. One of the things I want uh briefly touch, I probably anthropomorphize LMS probably too much, but but because they're trained on human output on the web, you know, my belief is we need to give LM like the right context and be as helpful as we can so they can actually solve our problems, right? I I completely agree. I'm also very polite to to the LLMs. It's how I get people to people to do work. It's how I'm going to get the agents to do work, right? So why wouldn't you, you know, be treat an agent like you would treat a human? I that's the way I So I agree. All right. So then we've got, you know, pretty detailed list of tasks, right? We've got 1 2 3 four with subtasks. Some we've even got sub subtasks here. And then we're going to start iterating on this. So here's how it works. I've got another rule called task list, which probably need to rename because that doesn't really make sense. But this is the instructions for iterating through uh these tasks. So I'll kind of walk you through that. So this is task list management. These are guidelines for managing task lists in markdown files to track progress. The task completion we have a uh we want to do one subtask at a time. Like this is really important that the the doesn't start trying to do all the tasks. uh when you finish a subtask immediately mark it as complete and then you'll see I say stop after each subtask uh and wait for the user's go ahead and then it's just a little bit more uh clear clarity here if people see me shaking my head it's because I am realizing now I'm using cursor like such an amateur this is I doubt that this is so good I'm just floating through the ether saying you know 03 take me away and maybe I'm I'm overconfident in my product management skills and so I'm putting this all into the chat but this is this is the way people I'm telling you pay attention I appreciate that I mean I think the answer is yes to both of us I mean sometimes you do just need to roll and see what happens but I'm learning over and over that if I don't follow this process I end up down some rabbit hole and I have to revert right so let's let's go ahead and continue here what I'm doing now is I'm tagging the task list rule which tells the AI I how to act and then I'm going to say let's start and then I'm going to tag the uh the tasks the task list which is uh so we got a prd we got a task list and now we have a set of rules that knows how to work through a task list and actually get work done it does exactly so all right so let's start it's going to think about it and it's looking through this big list of tasks right now and so what it's saying is okay let's start with the first subtask define Prisma scheme email campaign. I'll start by reading the existing Prisma uh campaign. Okay, existing blah blah blah you know, so it's just thinking it through and boom, it has checked off 1.1. H with a delightful noise. I have a question. Are you are you hooking it all into git? How are you doing sort of the the change management here? Yep. So what I tend to do is I will commit after I after I finish either one of the bullet one of the one of the parent tasks if I if I feel like the app is in a state that it's workable. Yep. And I will commit at that point. Got it. If I don't I won't commit until all of these tasks are done. Oh wow. Um which you know is probably you know half a day of work. it you you know you kind of get used to like oh all right if I had to revert now you know how bad would it be? Yep. And and I try to think about well what would I need to undo? So it said uh all right shall I proceed with subtask 1.2 and I'm going to say uh yes. Sometimes I'm really lazy and I just say why as in the letter Y. So it's just going to keep working. Now, we don't need to go through this whole thing, but I just wanted to show all of your amazing listeners and audience this is a pretty easy process to follow and I've built huge features with this. I mean you know, 10,000 lines of code reliably and almost never had trouble. I still feel like this human in the loop part is really important where after each task you are kind of checking what's happening. I've noticed that it often does introduce some small problem or there's a llinter um you know error and then you got to go fix it. So, and you know, this is great to get the actual engineering work done. But if I just take a step back for product managers out there that don't know where to get started with cursor, even if you just did the prd task list part, I'm looking at this task list right now and it's got and basically like epics and tasks in it. And that's a place where so many engineers and product managers get stuck in a loop like who's going to take this PRD and actually break it down in the right steps that are going to work in our codebase. So even just this is such a timesaver for people building products I think. So now you can overengineer this process. You know this is literally a markdown file. Um it's somewhat handc cranked. you know, I thought, oh, maybe I'll use, you know, Asana's MCP, you know, server and create a sauna task. And yeah, I was like, no, like it's actually easier for me just to see a markdown file and know what's happening and I can even add tasks to it. So, my encouragement to everybody is just start small, start simple and get good at that and get comfortable at that and then you can, you know, uh, graduate from there. So, and and 30 chime noises later, we are going to have a report about your yacht club. That's right. Emails. I mean, speaking of MCPs, are you using MCPS at all in your cursor experience? How is that fitting into your workflow? I am. So, I'm going to um show you a couple of those now. Um I wasn't using many at the beginning and then the first MCP I started using was for Postgres um because it's really useful to ask the AI, hey can you go see if I if this data is actually in the database. Um so I started that and then I've gone down the rabbit hole. So I'm going to show you a couple uh MCP servers that I think are really useful. So let me go and share my screen. Okay. So what you are seeing now is on the left I've got browser base. That's the actual backend. I've got a free account. So, I just want to try this out and see how well it works. I'm going to show you uh the fun that you can do with an MCP here. So, on the right, I've got cursor and I'm in my cursor settings. I'm going to go to MCP and you'll see down here I've got a browserbased MCP. Yep. Which I've set up. I've got stage hand as well, which is really fun. So, let me show you uh how this works. So, we're going to go back into start a new chats, turn it on agent mode, and I'm going to say um navigate to chat PRD and take a screen grab. Now, let's see if the MCP gods uh cooperate because I did this this morning and it I I was like, "Wow, this is super cool." Okay. So, what we should see over here in a minute, let me refresh this to see. It did. Oh my god, this is so cool. Okay. So, in the in the cloud. Oo. So, what I'm doing is controlling a headless browser in the cloud from cursor. The future is now. It's in It's bonkers. Well, it's like, okay, what use is this? Like, that's kind of cool. I mean, let's actually do something kind of fun. So I'll say uh navigate to pricing. Okay. So, we should actually see the cursor move over here in this headless browser in the cloud. You're just showing off at this point. I Well, I just learned this this morning and and Okay. And I was thinking, "Oh my god, this is so neat. Let's see if it if it actually works." Yep, there it goes. Whoa. So again, well besides kind of a parlor trick like what actual use is this? I think it's going to unlock a huge amount of front end testing for me. Yeah. Right. So as you know like it's really cluji right now trying to uh to squash bugs on the front end when you're like taking a screen grab and you're pasting into cursor and you're like no I mean over there and yep. Um, so now we have this this ability to start automating some of this behavior, you know, right inside cursor. So that was kind of a fun trick I thought I would show you. Now if you're watching this, you're like what it really what we're doing here is uh I'll go back to the MCP uh part of cursor. What we're doing is is basically giving cursor the ability to interact with other apps, right? And so we're saying, okay, browser base is pretty cool. You can have this browser in the cloud you can do things with. I want to be able to tell the AI what to do. I don't want to have to know how to call the APIs and do all that stuff. So that is uh what I thought was a lot of fun. So, and can you walk us through just a couple of the use cases, the ones we're seeing here? So, browser base lets you basically browse the web and and do a couple things through through the text window and cursor. What are some of these other ones that you find useful? Um, so Postgres is probably the one I use the most. Um, so this for the startup I'm building, I'm using Postgres on on uh for the database in Versel. And there's just a lot of times where I just want to be able to tell the AI, you know, is this value in this row in the database? Like I don't want to have to actually write SQL to do that. Yeah. And so you can go right into the chat window and just say, hey, you know, use the Postgres tool and tell me uh if this is in the database or not, which is really cool. Prisma is I'm using for this uh play project which is fun. Same with SQLite. So the one I use every day is is Postgres. And one of the things that I love about AI especially in the sort of dev tools stack is it just reduces toil. And one of the pieces I feel like is um toil for engineers is how many tabs you have to have open to orchestrate working across your task list. Right? You have you have to have your project management software open so you know like what task I'm working on and what's next. You have to have your browser open so you can do some work. Your querying your database and all this puts it in a single interface that you can seamlessly switch through in natural language. Amen. So I do want to show you one tiny quick other tool and I know we're almost out of time. No, let's do it. Um so you you're probably hearing over and over everyone's listening or watching me preaching about context. Um it it is just so much more important than I think we understand. And again, if we anthropomorphize, it's like, well, how would you expect anybody to do anything unless you give them the right book or the right piece of paper, right? And so I've started to use a tool called Repo Prompt. Again, I don't have any financial uh uh reason to say this. I don't own any of this company, but it's this really great tool for Mac. And I just want to show you how to use it really quick. The question is why? Like why wouldn't I just use Cursor? Well the the thing about cursor is there's all this magic happening in the background with the context where you don't know for sure what is in the context unless you tag it, right? Which is fine, but they they sort of magic that away and sometimes you really really want to control the context. So what I've done is I've open repo prompt. I've got the the site on the left and on the right I've got the UI and I've opened up the how I AI uh project which is that simple uh yacht email app. Okay. So say that I want to throw a lot of these into uh a prompt to do something. So if I select the whole repo, let's go over to compose down here. You can see how many tokens that is. All right, so that's 395,000 tokens. Okay, that's way that's way too many. So, let's go ahead and reduce that. So, all right, I know I want some stuff in the app folder. All right, why is it so big? Now, we're at, you know 324,000. Still too big. So, I think it's probably in generated. So, you get rid of that. Okay, good. Now, we're at 12,000 tokens. So, the point is you if you know what context you want, repo prompt is a really powerful way to do that. So, I'm going to go ahead and select components lib. Uh let's open up the schema for Prisma, you know, and scripts. All right. Now, what? So, I go up here and I put in a prompt. How can I improve the maintain maintainability of this code? And then you can do some other neat things like I want to include a stored prompt and I'm going to use the architect version. Now, what is that? Well, that is a prompt that repo prompt has written already with a bunch of kind of power moves in it, right? It's it should act like a an architect versus a dev. So now I go down to copy and I'm going to say I want to include the save prompts. I want to include the files and I want to include the user instructions. And I'm going to click copy. Now what? Well, I'll show you. So let's go over uh to 03. Now, I could I could go over to cursor, but I don't know exactly what cursor is going to do to my context. Instead, I'm going to paste it in here. Now, what is this? What you've got, let's start at the bottom. It's basically putting everything in XML tags, right? So you've got user instructions. So, that was the prompt I put in. Then, the meta prompt is uh telling it how to to execute the prompt and and the files that it's including. Let's go up here. So, file contents. This is kind of the key. So each file is included and it's it's demarked specifically like this. So it says the file with the actual path and it's so it basically it's very specific. It's saying to the AI this is exactly the context you need. It's super clear and then you can execute some sort of prompt on that. I do this for like heavy lifting stuff where I used to do this all the time with 01 Pro where I would go into repo prompt. I would select exactly the right context and then I would go into 01 pro and say think super hard about this. I've given you exactly the right context and you get amazing answers because of that. Yeah. And these these new models have such big context windows, but I'm not copying and pasting 12,000 tokens into the chat window right? But this tool just does it for you really. Interesting. And then you're getting less of a black box here. Less of a black box. Yeah. And you know, and I have a feeling that this stuff will probably go away. I think, you know, the context windows are going to get bigger. Tools like cursor are going to get better at managing context, you know but right now you have to do all this stuff. Like you you can't just wave your wand and and hope the LM is going to write all the right stuff for you. That that's what I've been doing. So now now I have a now I have a better process um to to follow here. Okay. Anything else really important in your stack you need to tell us about um the most important thing um uh is this. So let me share my screen. So this is TSTO's live set from New York City. So this is how I actually code. I just turn on some EDM and and late at night, you know, code after everyone goes to bed listening to amazing EDM. And uh that is an important part of my stack. So if I could ask for an additional cursor feature, it would be AI generated streaming EDM matched to the generation pace of your tokens that ends with a drop instead of that cursor. I would pay extra money for that. You you heard it here first. Get get all this task management context window stuff. Forget about that. I want the fun. Okay, we'll spend three minutes on lightning round questions. One, you're a builder. You're a founder. It's clear how this technology is changing the building part of things. How is it in your mind changing the company and the founder side of things? Wow. It's a complete rewrite. So I've been fortunate to start three companies and and see them acquired and and one of them you know we had about 110 employees and I had a CTO and a VP of Venge and you know product managers and and you know building this new startup I literally feel like I'm able to do all of it now am I able to do it as well as a dedicated product manager? No. Am I able to think as deeply as a CTO? No. But I am able for sure to build this company by myself. And I mean, you're doing this with chat purity. I mean, it's it's bonkers to me that it's actually possible. So, I I just can't wait for the future. I could not agree more. Okay. And then, of course, you showed us how you're a very thoughtful and organized product manager and manager of your AI, but you know, it sometime doesn't listen. So, what do you do? What's your what's your tactic for really getting it back on track? So, I'm just too nice. I I just say please think harder about this. Like, I know you can do this. Um, you know, think again about it. And I'm just not a mean person. So as much as I want to say, you know, god damn it, you know, I don't I I have a hypothesis that this is this is actually a parenting thing because I do the same thing. I say, "I believe you can do this. I believe in you." I I believe you can. I believe you can. Well, that's amazing. Ryan, where can we find you and how can we be helpful? Um, I am on X all the time. So x.comarson. Um, and if you want to know a little bit more, just head to rycarson.com and that is me. Great. Well, thank you so much. It's been a blast. Thank you. Thanks so much for watching. If you enjoyed this show, please like and subscribe here on YouTube, or even better, leave us a comment with your thoughts. You can also find this podcast on Apple Podcasts, Spotify, or your favorite podcast app. Please consider leaving us a rating and review, which will help others find the show. You can see all our episodes and learn more about the show at howiipod.com. See you next time.